package chess;

import java.awt.Graphics;
import java.util.Vector;
import piece.*;

public class Echiquier {
	public static final int DECALAGE=50;
	
	
	public static final int LIGNE = 8;
	public static final int COLONNE = 8;

	private Case m_cases[][];


	private Vector<Piece> cimetery_BLANC;
	private Vector<Piece> cimetery_NOIRE;
	

	public Echiquier() {
		m_cases = new Case[LIGNE][COLONNE];
		cimetery_NOIRE = new Vector<Piece>(16);
		cimetery_BLANC = new Vector<Piece>(16);
		createCase();
		init();
	}

	public void init() {
		emptyChess();
		fillChess();
	}
	
	private void createCase() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				Case _case = new Case(this,new Position(i, j));
				m_cases[i][j] = _case;
			}
		}
	}
	
	private void emptyChess() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				m_cases[i][j].removePion();
			}
		}
	}

	private void fillChess() {
		setWhite();
		setBlack();
	}

	private void setWhite() {
		Piece piece;
		int i = 0;
		for (; i < COLONNE; i++) {
			piece = new Pawn(Couleur.WHITE, m_cases[LIGNE - 2][i],this);
		}

		piece = new Rook(Couleur.WHITE, m_cases[LIGNE - 1][0],this);
		piece = new Horse(Couleur.WHITE, m_cases[LIGNE - 1][1],this);
		piece = new Bishop(Couleur.WHITE, m_cases[LIGNE - 1][2],this);
		piece = new Queen(Couleur.WHITE, m_cases[LIGNE - 1][3],this);
		piece = new King(Couleur.WHITE, m_cases[LIGNE - 1][4],this);
		piece = new Bishop(Couleur.WHITE, m_cases[LIGNE - 1][5],this);
		piece = new Horse(Couleur.WHITE, m_cases[LIGNE - 1][6],this);
		piece = new Rook(Couleur.WHITE, m_cases[LIGNE - 1][7],this);

	}

	private void setBlack() {
		Piece piece;
		int i = 0;
		for (; i < COLONNE; i++) {
			piece = new Pawn(Couleur.BLACK, m_cases[1][i],this);
		}

		piece = new Rook(Couleur.BLACK, m_cases[0][0],this);
		piece = new Horse(Couleur.BLACK, m_cases[0][1],this);
		piece = new Bishop(Couleur.BLACK, m_cases[0][2],this);
		piece = new Queen(Couleur.BLACK, m_cases[0][3],this);
		piece = new King(Couleur.BLACK, m_cases[0][4],this);
		piece = new Bishop(Couleur.BLACK, m_cases[0][5],this);
		piece = new Horse(Couleur.BLACK, m_cases[0][6],this);
		piece = new Rook(Couleur.BLACK, m_cases[0][7],this);
	}

	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		int x_abs;
		int y_abs;
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				x_abs = j * Case.SIZE;
				y_abs = i * Case.SIZE+DECALAGE;
				m_cases[i][j].paint(g,x_abs,y_abs);
			}
		}
		
		int i=0;
		
		x_abs = 5;
		y_abs = (LIGNE+1)*Case.SIZE;
		
		for (Piece pieceWhite : cimetery_BLANC) {
			pieceWhite.paint(g, x_abs +(i*21), y_abs);
			i++;
		}
		 i=0;
		for (Piece pieceBlack : cimetery_NOIRE) {
			pieceBlack.paint(g, x_abs + (i*21), 0);			
			i++;
		}
	}

	
	public Case[][] getCases() {
		return m_cases;
	}

	public Case getCase(int ligne,int colonne) {
		// TODO Auto-generated method stub
		if(ligne<LIGNE && colonne< COLONNE && ligne>=0 && colonne>=0) {
			return m_cases[ligne][colonne];
		}
		return null;
	}

	public void setTriggerFalse() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				m_cases[i][j].m_trigger=false;
			}
		}
	}
	
	public void setTriggerTrue(Piece piece) {
		if (piece == null) {
			return;
		}
		
		
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				if(piece.canmove(m_cases[i][j])) {
					m_cases[i][j].m_trigger=true;
				}
			}
		}
	}
	
	public Vector<Piece> getCimeteryWhite() {
		return cimetery_BLANC;
	}
	
	public Vector<Piece> getCimeteryBlack() {
		return cimetery_NOIRE;
	}

}
