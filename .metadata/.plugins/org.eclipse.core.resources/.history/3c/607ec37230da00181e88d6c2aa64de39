package chess;

import java.awt.Graphics;

import javafx.event.*;
import javafx.scene.input.MouseEvent;
import piece.*;

public class Echiquier {

	public static final int LIGNE = 8;
	public static final int COLONNE = 8;

	private Case m_cases[][];

	private Piece pieces_BLANC[];
	private Piece pieces_NOIRE[];

	public Echiquier() {
		m_cases = new Case[LIGNE][COLONNE];
		pieces_BLANC = new Piece[16];
		pieces_NOIRE = new Piece[16];
		createCase();
		init();
	}

	public void init() {
		emptyChess();
		fillChess();
	}
	
	private void createCase() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				Case _case = new Case(new Position(i, j));
				m_cases[i][j] = _case;
			}
		}
	}
	
	private void emptyChess() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				m_cases[i][j].removePion();
			}
		}
		pieces_BLANC= new Piece[16];
		pieces_NOIRE= new Piece[16];
	}

	private void fillChess() {
		setWhite();
		setBlack();
	}

	private void setWhite() {
		Piece piece;
		int i = 0;
		for (; i < COLONNE; i++) {
			piece = new Pion(Couleur.BLANC, m_cases[LIGNE - 2][i]);
			pieces_BLANC[i] = piece;
		}

		piece = new Tour(Couleur.BLANC, m_cases[LIGNE - 1][0]);
		pieces_BLANC[COLONNE] = piece;
		piece = new Cavalier(Couleur.BLANC, m_cases[LIGNE - 1][1]);
		pieces_BLANC[COLONNE + 1] = piece;
		piece = new Fou(Couleur.BLANC, m_cases[LIGNE - 1][2]);
		pieces_BLANC[COLONNE + 2] = piece;
		piece = new Reine(Couleur.BLANC, m_cases[LIGNE - 1][3]);
		pieces_BLANC[COLONNE + 3] = piece;
		piece = new Roi(Couleur.BLANC, m_cases[LIGNE - 1][4]);
		pieces_BLANC[COLONNE + 4] = piece;
		piece = new Fou(Couleur.BLANC, m_cases[LIGNE - 1][5]);
		pieces_BLANC[COLONNE + 5] = piece;
		piece = new Cavalier(Couleur.BLANC, m_cases[LIGNE - 1][6]);
		pieces_BLANC[COLONNE + 6] = piece;
		piece = new Tour(Couleur.BLANC, m_cases[LIGNE - 1][7]);
		pieces_BLANC[COLONNE + 7] = piece;

	}

	private void setBlack() {
		Piece piece;
		int i = 0;
		for (; i < COLONNE; i++) {
			piece = new Pion(Couleur.NOIR, m_cases[1][i]);
			pieces_NOIRE[i] = piece;
		}

		piece = new Tour(Couleur.NOIR, m_cases[0][0]);
		pieces_NOIRE[COLONNE] = piece;
		piece = new Cavalier(Couleur.NOIR, m_cases[0][1]);
		pieces_NOIRE[COLONNE + 1] = piece;
		piece = new Fou(Couleur.NOIR, m_cases[0][2]);
		pieces_NOIRE[COLONNE + 2] = piece;
		piece = new Reine(Couleur.NOIR, m_cases[0][3]);
		pieces_NOIRE[COLONNE + 3] = piece;
		piece = new Roi(Couleur.NOIR, m_cases[0][4]);
		pieces_NOIRE[COLONNE + 4] = piece;
		piece = new Fou(Couleur.NOIR, m_cases[0][5]);
		pieces_NOIRE[COLONNE + 5] = piece;
		piece = new Cavalier(Couleur.NOIR, m_cases[0][6]);
		pieces_NOIRE[COLONNE + 6] = piece;
		piece = new Tour(Couleur.NOIR, m_cases[0][7]);
		pieces_NOIRE[COLONNE + 7] = piece;
	}

	public void paint(Graphics g) {
		// TODO Auto-generated method stub
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				m_cases[i][j].paint(g);
			}
		}
	}

	public Piece[] getPieceBlanch() {
		return pieces_BLANC;
	}
	
	public Case[][] getCases() {
		return m_cases;
	}

	public Case getCase(int ligne,int colonne) {
		// TODO Auto-generated method stub
		if(ligne<LIGNE && colonne< COLONNE && ligne>=0 && colonne>=0) {
			return m_cases[ligne][colonne];
		}
		return null;
	}

	private void setTriggerFalse() {
		for (int i = 0; i < LIGNE; i++) {
			for (int j = 0; j < COLONNE; j++) {
				m_cases[i][j].trigger=false;
			}
		}
	}
	
	public void setTriggerTrue(Piece piece) {
		
	}
	
}
