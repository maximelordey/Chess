package move;

import chess.Case;
import chess.Couleur;
import chess.Echiquier;
import chess.Position;
import piece.Piece;

public class Move_diagonal extends Move{

	public Move_diagonal(Echiquier echiquier) {
		super(echiquier);
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean canmove(Piece piece, Case next_case) {
		// TODO Auto-generated method stub
		boolean canmove = false;
		Position current_pos = piece.m_case_courante.getPosition();
		
		int diff_ligne= next_case.getPosition().m_ligne-current_pos.m_ligne;
		int diff_colonne=next_case.getPosition().m_colonne-current_pos.m_colonne;
		
		
		boolean condition_1=Math.abs(diff_ligne) == Math.abs(diff_colonne);
		boolean condition_2= !next_case.isUsed() || (next_case.isUsed() && next_case.getPion().getCouleur() != piece.getCouleur());
		
		int i; // ligne
		int j; // colonne
		if (condition_1 && condition_2) {
			if (diff_ligne > 0) {
				if (diff_colonne > 0) {
					i=current_pos.m_ligne+1;
					j=current_pos.m_colonne+1;
					while(i<next_case.getPosition().m_ligne && j<next_case.getPosition().m_colonne && !this.m_echiquier.getCase(next_case.getPosition().m_ligne, i).isUsed()) {
						i++;
					}
					return i==next_case.getPosition().m_colonne;					
				} else {
					i=current_pos.m_colonne-1;
					while(i>next_case.getPosition().m_colonne && !this.m_echiquier.getCase(next_case.getPosition().m_ligne, i).isUsed()) {
						i--;
					}
					return i==next_case.getPosition().m_colonne;
				}
			} else {
				if (diff_ligne > 0) {
					i=current_pos.m_ligne+1;
					while(i<next_case.getPosition().m_ligne && !this.m_echiquier.getCase(i, current_pos.m_colonne).isUsed()) {
						i++;
					}
					return i==next_case.getPosition().m_ligne;
				} else {
					i=current_pos.m_ligne-1;
					while(i>next_case.getPosition().m_ligne && !this.m_echiquier.getCase(i, current_pos.m_colonne).isUsed()) {
						i--;
					}
					return i==next_case.getPosition().m_ligne;
				}
			}			
		}else {
			return false;
		}

	}

}
